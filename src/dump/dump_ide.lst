Assembler release DWC_2.0 version 2.11
May 6, 2004 (c) Motorola (free ware)
0001                         *
0002                         * Sector Dump Utility 
0003                         * for IDE Drives or Compact Flash
0004                         * for the 6809
0005                         * revised for 16 bit peripheral bus
0006                         * on XESS XSA-3S1000 / XST-3.0
0007                         *
0008                         * John Kent
0009                         * 1 Feb 2008
0010                         *
0011                         * SYS09BUG
0012                         *
0013 F800                    MON_BASE  EQU $F800
0014 F800                    MONV      EQU MON_BASE+0
0015 F802                    NEXTCV    EQU MON_BASE+2
0016 F804                    INCHV     EQU MON_BASE+4
0017 F806                    INCHEV    EQU MON_BASE+6
0018 F808                    INCHEKV   EQU MON_BASE+8
0019 F80A                    OUTCHV    EQU MON_BASE+10
0020 F80C                    PDATAV    EQU MON_BASE+12
0021 F80E                    PCRLFV    EQU MON_BASE+14
0022 F810                    PSTRGV    EQU MON_BASE+16
0023                         *
0024                         * Register Equates
0025                         *
0026 E100                    CF_BASE    EQU $E100
0027 E100                    CF_DATA    EQU CF_BASE+0
0028 E102                    CF_ERROR   EQU CF_BASE+2 ; read error
0029 E102                    CF_FEATURE EQU CF_BASE+2 ; write feature
0030 E104                    CF_SECCNT  EQU CF_BASE+4
0031 E106                    CF_SECNUM  EQU CF_BASE+6
0032 E108                    CF_CYLLO   EQU CF_BASE+8
0033 E10A                    CF_CYLHI   EQU CF_BASE+10
0034 E10C                    CF_HEAD    EQU CF_BASE+12
0035 E10E                    CF_STATUS  EQU CF_BASE+14 ; read status
0036 E10E                    CF_COMAND  EQU CF_BASE+14 ; write command
0037 E11E                    CF_AUX     EQU CF_BASE+30
0038                         *
0039                         * Command Equates
0040                         *
0041 0006                    AUXRESET   EQU $06 ; CF_AUX Reset command
0042 0002                    AUXRELEA   EQU $02
0043 0020                    CMDREAD    EQU $20 ; Read Single sector
0044 0030                    CMDWRITE   EQU $30 ; Write Single sector
0045 00E0                    HEADLBA    EQU $E0
0046                         *
0047                         * Status bit equates
0048                         *
0049 0080                    BUSY       EQU $80
0050 0040                    DRDY       EQU $40
0051 0008                    DRQ        EQU $08
0052 0001                    ERR        EQU $01
0053                         *
0054                         * Start of Program
0055                         *
0056 0100                             ORG $0100
0057 0100 16 02 47           START    LBRA START1
0058                         *
0059                         * DATA STORAGE
0060                         *
0061 0103 00 00 00           SECNUM   FCB $00,$00,$00
0062 0106 E0 00              CPORT    FDB $E000
0063 0108 FF                 ECHO     FCB $FF
0064 0109 00                          FCB $00
0065                         *
0066                         * SECTOR BUFFER
0067                         *
0068 010A                    SECBUF   RMB 512
0069                         *
0070                         * PROGRAM STACK
0071                         *
0072 030A                             RMB 64
0073 034A                    STACK    EQU *
0074                         *
0075                         * Initialization
0076                         *
0077 034A 10 CE 03 4A        START1 LDS #STACK
0078                         *
0079                         * Clear sector buffer
0080                         *
0081 034E 8E 01 0A                  LDX #SECBUF
0082 0351 10 8E 00 00               LDY #0
0083 0355 C6 00                     LDB #0
0084 0357 10 AF 81           ZEROLP STY ,X++
0085 035A 5A                        DECB
0086 035B 26 FA                     BNE ZEROLP
0087                         *
0088                         * INITIALIZE CF CARD FOR 8 BIT LBA MODE
0089                         *
0090 035D CC 00 06                  LDD #AUXRESET
0091 0360 FD E1 1E                  STD CF_AUX
0092 0363 CC 00 02                  LDD #AUXRELEA
0093 0366 FD E1 1E                  STD CF_AUX
0094 0369 BD 04 88                  JSR WAITRDY
0095 036C CC 00 E0                  LDD #HEADLBA
0096 036F FD E1 0C                  STD CF_HEAD
0097 0372 BD 04 88                  JSR WAITRDY
0098                         *
0099                         * DISPLAY TITTLE BANNER
0100                         *
0101 0375 8E 06 49                  LDX #TTLMSG
0102 0378 BD 06 2C                  JSR PDATA
0103                         *
0104                         * COMMAND LOOP
0105                         * R - READ
0106                         * W - WRITE
0107                         * N - NEXT
0108                         * P - PREV
0109                         * M - MODIFY
0110                         * Q - QUIT
0111                         *
0112 037B 8E 06 73           CMDLP  LDX #CMDMSG
0113 037E BD 06 2C                  JSR PDATA
0114 0381 BD 06 30                  JSR ECHON
0115 0384 81 52                     CMPA #'R'
0116 0386 27 64                     BEQ READ
0117 0388 81 4E                     CMPA #'N'
0118 038A 27 3D                     BEQ NEXT
0119 038C 81 50                     CMPA #'P'
0120 038E 27 48                     BEQ PREV
0121 0390 81 57                     CMPA #'W'
0122 0392 10 27 00 A5               LBEQ WRITE
0123 0396 81 4D                     CMPA #'M'
0124 0398 27 2A                     BEQ MODIFY
0125 039A 81 51                     CMPA #'Q'
0126 039C 27 22                     BEQ QUIT
0127 039E 81 72                     CMPA #'r'
0128 03A0 27 4A                     BEQ READ
0129 03A2 81 6E                     CMPA #'n'
0130 03A4 27 23                     BEQ NEXT
0131 03A6 81 70                     CMPA #'p'
0132 03A8 27 2E                     BEQ PREV
0133 03AA 81 77                     CMPA #'w'
0134 03AC 10 27 00 8B               LBEQ WRITE
0135 03B0 81 6D                     CMPA #'m'
0136 03B2 27 10                     BEQ MODIFY
0137 03B4 81 71                     CMPA #'q'
0138 03B6 27 08                     BEQ QUIT
0139 03B8 8E 07 3C                  LDX #WOTMSG
0140 03BB BD 06 24                  JSR PSTRNG
0141 03BE 20 BB                     BRA CMDLP
0142                         *
0143                         * QUIT
0144                         *
0145 03C0 6E 9F F8 00        QUIT   JMP [MONV]
0146                         *
0147                         * MODIFY SECTOR
0148                         *
0149 03C4 BD 05 2B           MODIFY JSR MEMCHG
0150 03C7 20 B2                     BRA CMDLP
0151                         *
0152                         * NEXT SECTOR (READ)
0153                         * INCREMENT SECTOR NUMBER
0154                         * WRAPS AROUND TO ZERO ON $FFFFFF
0155                         *
0156 03C9 BE 01 04           NEXT   LDX SECNUM+1
0157 03CC 30 01                     LEAX 1,X
0158 03CE BF 01 04                  STX SECNUM+1
0159 03D1 26 2A                     BNE READS 
0160 03D3 7C 01 03                  INC SECNUM
0161 03D6 20 25                     BRA READS
0162                         *
0163                         * PREVIOUS SECTOR (READ)
0164                         * DECREMENT SECTOR NUMBER
0165                         * DON'T DECREMENT PAST $000000
0166                         *
0167 03D8 BE 01 04           PREV   LDX SECNUM+1
0168 03DB 26 08                     BNE PREV1
0169 03DD 7D 01 03                  TST SECNUM
0170 03E0 27 1B                     BEQ READS
0171 03E2 7A 01 03                  DEC SECNUM
0172 03E5 30 1F              PREV1  LEAX -1,X
0173 03E7 BF 01 04                  STX SECNUM+1
0174 03EA 20 11                     BRA READS
0175                         *
0176                         * READ SECTORS FROM CF
0177                         *
0178 03EC 8E 06 EA           READ   LDX #SECPMT
0179 03EF BD 06 24                  JSR PSTRNG
0180 03F2 BD 05 91                  JSR IN6HEX
0181 03F5 29 41                     BVS RDEXIT
0182 03F7 F7 01 03                  STB SECNUM
0183 03FA BF 01 04                  STX SECNUM+1
0184                         *
0185 03FD 4F                 READS  CLRA
0186 03FE C6 01                     LDB #$01
0187 0400 FD E1 04                  STD CF_SECCNT
0188                         *
0189 0403 F6 01 05                  LDB SECNUM+2
0190 0406 FD E1 06                  STD CF_SECNUM
0191                         *
0192 0409 F6 01 04                  LDB SECNUM+1
0193 040C FD E1 08                  STD CF_CYLLO
0194                         *
0195 040F F6 01 03                  LDB SECNUM+0
0196 0412 FD E1 0A                  STD CF_CYLHI
0197                         *
0198 0415 C6 20                     LDB #CMDREAD ; IDE READ MULTIPLE
0199 0417 FD E1 0E                  STD CF_COMAND
0200 041A BD 04 88                  JSR WAITRDY
0201                         *
0202 041D 8E 01 0A                  LDX #SECBUF
0203 0420 10 8E 01 00               LDY #256
0204                         *
0205                         * READ LOOP
0206                         *
0207 0424 BD 04 97           RDLOOP JSR WAITDRQ
0208 0427 FC E1 00                  LDD CF_DATA ; reverse order of bytes
0209 042A E7 80                     STB ,X+
0210 042C A7 80                     STA ,X+
0211 042E 31 3F                     LEAY -1,Y
0212 0430 26 F2                     BNE RDLOOP
0213                         *
0214 0432 BD 04 88                  JSR WAITRDY
0215 0435 BD 04 9F                  JSR MEMDUMP
0216 0438 7E 03 7B           RDEXIT JMP CMDLP
0217                         *
0218                         * WRITE SECTOR TO CF
0219                         *
0220 043B 8E 06 EA           WRITE  LDX #SECPMT
0221 043E BD 06 24                  JSR PSTRNG
0222 0441 BD 05 91                  JSR IN6HEX
0223 0444 29 3F                     BVS WREXIT
0224 0446 F7 01 03                  STB SECNUM
0225 0449 BF 01 04                  STX SECNUM+1
0226                         *
0227 044C 4F                        CLRA
0228 044D C6 01                     LDB #$01
0229 044F FD E1 04                  STD CF_SECCNT
0230                         *
0231 0452 F6 01 05                  LDB SECNUM+2
0232 0455 FD E1 06                  STD CF_SECNUM
0233                         *
0234 0458 F6 01 04                  LDB SECNUM+1
0235 045B FD E1 08                  STD CF_CYLLO
0236                         *
0237 045E F6 01 03                  LDB SECNUM+0
0238 0461 FD E1 0A                  STD CF_CYLHI
0239                         *
0240 0464 CC 00 30                  LDD #CMDWRITE; IDE WRITE MULTIPLE
0241 0467 FD E1 0E                  STD CF_COMAND
0242 046A BD 04 88                  JSR WAITRDY
0243                         *
0244 046D 8E 01 0A                  LDX #SECBUF
0245 0470 10 8E 01 00               LDY #256
0246                         *
0247                         * WRITE LOOP
0248                         *
0249 0474 BD 04 97           WRLOOP JSR WAITDRQ
0250 0477 E6 80                     LDB ,X+    ; reverse order of bytes
0251 0479 A6 80                     LDA ,X+
0252 047B FD E1 00                  STD CF_DATA
0253 047E 31 3F                     LEAY -1,Y
0254 0480 26 F2                     BNE WRLOOP
0255                         *
0256 0482 BD 04 88                  JSR WAITRDY
0257 0485 7E 03 7B           WREXIT JMP CMDLP
0258                         *
0259                         * WAIT UNTIL READY
0260                         *
0261 0488 FC E1 0E           WAITRDY LDD CF_STATUS
0262 048B C5 80                      BITB #BUSY
0263 048D 26 F9                      BNE WAITRDY
0264 048F FC E1 0E                   LDD CF_STATUS
0265 0492 C5 40                      BITB #DRDY
0266 0494 27 F2                      BEQ WAITRDY
0267 0496 39                         RTS
0268                         *
0269                         * WAIT FOR DATA REQUEST
0270                         *
0271 0497 FC E1 0E           WAITDRQ LDD CF_STATUS
0272 049A C5 08                      BITB #DRQ
0273 049C 27 F9                      BEQ WAITDRQ
0274 049E 39                         RTS
0275                         *
0276                         * DUMP SECTOR IN MEMORY
0277                         * 
0278 049F 8E 07 03           MEMDUMP LDX  #SECMSG
0279 04A2 BD 06 24                   JSR  PSTRNG
0280 04A5 B6 01 03                   LDA  SECNUM
0281 04A8 BD 05 F9                   JSR  OUT2H
0282 04AB BE 01 04                   LDX  SECNUM+1
0283 04AE BD 05 F1                   JSR  OUT4H
0284 04B1 BD 06 28                   JSR  PCRLF
0285                         *
0286                         * Dump first 256 bytes
0287                         *
0288 04B4 10 8E 00 00                LDY  #$0000
0289 04B8 30 A9 00 FF                LEAX #$0FF,Y
0290 04BC BD 04 D0                   JSR  AJDUMP
0291                         *
0292                         * Prompt to continue
0293                         *
0294 04BF 8E 07 45                   LDX #PAGMSG
0295 04C2 BD 06 24                   JSR PSTRNG
0296 04C5 BD 06 39                   JSR INCH
0297                         *
0298                         * Dump second 256 bytes
0299                         *
0300 04C8 10 8E 01 00                LDY  #$0100
0301 04CC 30 A9 00 FF                LEAX #$0FF,Y
0302                         * 
0303                         * ADJUST LOWER AND UPPER ADDRESS LIMITS 
0304                         * TO EVEN 16 BYTE BOUNDRIES. 
0305                         * 
0306                         * IF LOWER ADDR = $4532 
0307                         * LOWER BOUNDS WILL BE ADJUSTED TO = $4530. 
0308                         * 
0309                         * IF UPPER ADDR = $4567 
0310                         * UPPER BOUNDS WILL BE ADJUSTED TO = $4570. 
0311                         * 
0312                         * ENTER WITH LOWER ADDRESS IN X-REG. 
0313                         *           -UPPER ADDRESS ON TOP OF STACK. 
0314                         * 
0315 04D0 1F 10              AJDUMP  TFR  X,D     GET UPPER ADDR IN D-REG 
0316 04D2 C3 00 10                   ADDD #$10    ADD 16 TO UPPER ADDRESS 
0317 04D5 C4 F0                      ANDB #$F0    MASK TO EVEN 16 BYTE BOUNDRY 
0318 04D7 34 06                      PSHS A,B     SAVE ON STACK AS UPPER DUMP LIMIT 
0319 04D9 1F 20                      TFR  Y,D     $F9A5 GET LOWER ADDRESS IN D-REG 
0320 04DB C4 F0                      ANDB #$F0    MASK TO EVEN 16 BYTE BOUNDRY 
0321 04DD 1F 01                      TFR  D,X     PUT IN X-REG AS LOWER DUMP LIMIT 
0322 04DF AC E4              NXTLIN  CMPX ,S      COMPARE LOWER TO UPPER LIMIT 
0323 04E1 27 05                      BEQ  SKPDMP  IF EQUAL SKIP HEX-ASCII DUMP 
0324 04E3 17 01 57                   LBSR INCHEK  CHECK FOR INPUT FROM KEYBOARD 
0325 04E6 27 03                      BEQ  EDUMP
0326 04E8 32 62              SKPDMP  LEAS 2,S     READJUST STACK IF NOT DUMPING 
0327 04EA 39                         RTS          ;
0328                         * 
0329                         * PRINT 16 HEX BYTES FOLLOWED BY 16 ASCII CHARACTERS 
0330                         * FOR EACH LINE THROUGHOUT ADDRESS LIMITS. 
0331                         * 
0332 04EB 34 10              EDUMP   PSHS X       PUSH LOWER ADDR LIMIT ON STACK 
0333 04ED 8E 07 30                   LDX  #MSG5   POINT TO MSG " - " 
0334 04F0 17 01 31                   LBSR PSTRNG  PRINT MSG 
0335 04F3 AE E4                      LDX  ,S      LOAD LOWER ADDR FROM TOP OF STACK 
0336 04F5 17 00 F9                   LBSR OUT4H   PRINT THE ADDRESS
0337 04F8 17 01 46                   LBSR OUT2S   2 SPACES 
0338 04FB C6 10                      LDB  #$10    LOAD COUNT OF 16 BYTES TO DUMP 
0339 04FD A6 89 01 0A        ELOOP   LDA  SECBUF,X     GET FROM MEMORY HEX BYTE TO PRINT 
0340 0501 30 01                      LEAX 1,X
0341 0503 17 00 F3                   LBSR OUT2H   OUTPUT HEX BYTE AS ASCII 
0342 0506 17 01 3A                   LBSR OUT1S   OUTPUT SPACE 
0343 0509 5A                         DECB         $F9D1 DECREMENT BYTE COUNT 
0344 050A 26 F1                      BNE  ELOOP   CONTINUE TIL 16 HEX BYTES PRINTED 
0345                         * 
0346                         * PRINT 16 ASCII CHARACTERS 
0347                         * IF NOT PRINTABLE OR NOT VALID 
0348                         * ASCII PRINT A PERIOD (.) 
0349 050C 17 01 32                   LBSR OUT2S   2 SPACES 
0350 050F AE E1                      LDX  ,S++    GET LOW LIMIT FRM STACK - ADJ STACK 
0351 0511 C6 10                      LDB  #$10    SET ASCII CHAR TO PRINT = 16 
0352 0513 A6 89 01 0A        EDPASC  LDA  SECBUF,X     GET CHARACTER FROM MEMORY 
0353 0517 30 01                      LEAX 1,X
0354 0519 81 20                      CMPA #$20    IF LESS THAN $20, NON-PRINTABLE? 
0355 051B 25 04                      BCS  PERIOD  IF SO, PRINT PERIOD INSTEAD 
0356 051D 81 7E                      CMPA #$7E    IS IT VALID ASCII? 
0357 051F 23 02                      BLS  PRASC   IF SO PRINT IT 
0358 0521 86 2E              PERIOD  LDA  #'.     LOAD A PERIOD (.) 
0359 0523 17 01 1F           PRASC   LBSR OUTCH   PRINT ASCII CHARACTER 
0360 0526 5A                         DECB         DECREMENT COUNT 
0361 0527 26 EA                      BNE  EDPASC 
0362 0529 20 B4                      BRA  NXTLIN 
0363                         *
0364                         * 
0365                         ***** "M" MEMORY EXAMINE AND CHANGE ***** 
0366                         *
0367                         * RESTRICT ADDRESSING RANGE TO 512 BYTES ($000 - $1FF)
0368                         * 
0369 052B 8E 07 15           MEMCHG  LDX  #MEMMSG
0370 052E BD 06 24                   JSR  PSTRNG
0371 0531 17 00 74                   LBSR IN3HEX  INPUT ADDRESS 
0372 0534 29 34                      BVS  CHRTN   IF NOT HEX, RETURN 
0373 0536 8C 02 00                   CMPX #$0200
0374 0539 24 2F                      BHS  CHRTN
0375 053B 1F 12                      TFR  X,Y     SAVE ADDR IN "Y" 
0376 053D 8E 07 30           MEMC2   LDX  #MSG5   POINT TO MSG " - " 
0377 0540 17 00 E1                   LBSR PSTRNG  PRINT MSG 
0378 0543 1F 21                      TFR  Y,X     FETCH ADDRESS 
0379 0545 17 00 A9                   LBSR OUT4H   PRINT ADDR IN HEX 
0380 0548 17 00 F8                   LBSR OUT1S   OUTPUT SPACE 
0381 054B A6 A9 01 0A                LDA  SECBUF,Y GET CONTENTS OF CURRENT ADDR. 
0382 054F 17 00 A7                   LBSR OUT2H   OUTPUT CONTENTS IN ASCII 
0383 0552 17 00 EE                   LBSR OUT1S   OUTPUT SPACE 
0384 0555 17 00 60                   LBSR BYTE    LOOP WAITING FOR OPERATOR INPUT 
0385 0558 28 11                      BVC  CHANGE  IF VALID HEX GO CHANGE MEM. LOC. 
0386 055A 81 08                      CMPA #8      IS IT A BACKSPACE (CNTRL H)? 
0387 055C 27 DF                      BEQ  MEMC2   PROMPT OPERATOR AGAIN 
0388 055E 81 18                      CMPA #$18    IS IT A CANCEL (CNTRL X)? 
0389 0560 27 DB                      BEQ  MEMC2   PROMPT OPERATOR AGAIN 
0390 0562 81 5E                      CMPA #'^     IS IT AN UP ARROW? 
0391 0564 27 21                      BEQ  BACK    DISPLAY PREVIOUS BYTE 
0392 0566 81 0D                      CMPA #$D     IS IT A CR? 
0393 0568 26 13                      BNE  FORWRD  DISPLAY NEXT BYTE 
0394 056A 39                 CHRTN   RTS          EXIT ROUTINE 
0395                         * 
0396                         * 
0397 056B A7 A9 01 0A        CHANGE  STA  SECBUF,Y      CHANGE BYTE IN MEMORY 
0398 056F A1 A9 01 0A                CMPA SECBUF,Y      DID MEMORY BYTE CHANGE? 
0399 0573 27 08                      BEQ  FORWRD  $F972 
0400 0575 17 00 CB                   LBSR OUT1S   OUTPUT SPACE 
0401 0578 86 3F                      LDA  #'?     LOAD QUESTION MARK 
0402 057A 17 00 C8                   LBSR OUTCH   PRINT IT 
0403 057D 10 8C 01 FF        FORWRD  CMPY #$01FF
0404 0581 27 BA                      BEQ  MEMC2
0405 0583 31 21                      LEAY 1,Y     POINT TO NEXT HIGHER MEM LOCATION 
0406 0585 20 B6                      BRA  MEMC2   PRINT LOCATION & CONTENTS 
0407 0587 10 8C 00 00        BACK    CMPY #$0000
0408 058B 27 B0                      BEQ  MEMC2
0409 058D 31 3F                      LEAY -1,Y    POINT TO LAST MEM LOCATION 
0410 058F 20 AC                      BRA  MEMC2   PRINT LOCATION & CONTENTS 
0411                         * 
0412                         * THE FOLLOWING ROUTINE LOOPS WAITING FOR THE 
0413                         * OPERATOR TO INPUT ONE VALID HEX ADDRESS. THE 
0414                         * ADDRESS IS RETURNED IN THE "X" REGISTER. 
0415                         * 
0416                         * IN6HEX - MS BYTE IN ACCB
0417                         *          LS WORD IN X REG
0418                         *
0419 0591 32 7D              IN6HEX LEAS -3,S
0420 0593 8D 23                     BSR  BYTE
0421 0595 29 57                     BVS  NOTHEX
0422 0597 A7 E4                     STA  0,S
0423 0599 8D 1D                     BSR  BYTE
0424 059B 29 51                     BVS  NOTHEX
0425 059D A7 61                     STA  1,S
0426 059F 8D 17                     BSR  BYTE
0427 05A1 29 4B                     BVS  NOTHEX
0428 05A3 A7 62                     STA  2,S
0429 05A5 4F                        CLRA
0430 05A6 35 94                     PULS B,X,PC
0431                         *
0432                         * INPUT 3 HEX DIGITS
0433                         * RESULT RETURNED IN X
0434                         *
0435 05A8 8D 21              IN3HEX BSR INHEX INPUT HEX (1 HEX CHAR) 
0436 05AA 29 42                     BVS NOTHEX EXIT IF NOT VALID HEX 
0437 05AC 1F 01                     TFR  D,X 
0438 05AE 8D 08                     BSR BYTE INPUT BYTE (2 HEX CHAR) 
0439 05B0 29 3C                     BVS NOTHEX 
0440 05B2 34 10                     PSHS X 
0441 05B4 A7 61                     STA  1,S 
0442 05B6 35 90                     PULS X,PC 
0443                         * 
0444                         ***** INPUT BYTE (2 HEX CHAR.) ***** 
0445                         * 
0446 05B8 8D 11              BYTE   BSR INHEX GET HEX LEFT 
0447 05BA 29 32                     BVS NOTHEX EXIT IF NOT VALID HEX 
0448 05BC 48                        ASLA   ;
0449 05BD 48                        ASLA   ;
0450 05BE 48                        ASLA   ; SHIFT INTO LEFT NIBBLE
0451 05BF 48                        ASLA   ;
0452 05C0 1F 89                     TFR  A,B PUT HEXL IN "B" 
0453 05C2 8D 07                     BSR INHEX GET HEX RIGHT 
0454 05C4 29 28                     BVS NOTHEX EXIT IF NOT VALID HEX 
0455 05C6 34 04                     PSHS B PUSH HEXL ON STACK 
0456 05C8 AB E0                     ADDA ,S+ ADD HEXL TO HEXR AND ADJ. STK 
0457 05CA 39                        RTS  RETURN WITH HEX L&R IN "A" 
0458                         * 
0459                         * 
0460 05CB 8D 63              INHEX  BSR ECHON INPUT ASCII CHAR. 
0461 05CD 81 30                     CMPA #'0 IS IT > OR = "0" ? 
0462 05CF 25 1D                     BCS NOTHEX IF LESS IT AIN'T HEX 
0463 05D1 81 39                     CMPA #'9 IS IT < OR = "9" ? 
0464 05D3 22 03                     BHI INHEXA IF > MAYBE IT'S ALPHA 
0465 05D5 80 30                     SUBA #$30 ASCII ADJ. NUMERIC 
0466 05D7 39                        RTS  ;
0467                         * 
0468                         * 
0469 05D8 81 41              INHEXA CMPA #'A IS IT > OR = "A" 
0470 05DA 25 12                     BCS NOTHEX IF LESS IT AIN'T HEX 
0471 05DC 81 46                     CMPA #'F IS IT < OR = "F" ? 
0472 05DE 22 03                     BHI INHEXL IF > IT AIN'T HEX 
0473 05E0 80 37                     SUBA #$37 ASCII ADJ. ALPHA 
0474 05E2 39                        RTS  ;
0475                         * 
0476 05E3 81 61              INHEXL CMPA #'a IS IT > OR = "a" 
0477 05E5 25 07                     BCS NOTHEX IF LESS IT AIN'T HEX 
0478 05E7 81 66                     CMPA #'f IS IT < "f" 
0479 05E9 22 03                     BHI NOTHEX IF > IT AIN'T HEX 
0480 05EB 80 57                     SUBA #$57 ADJUST TO LOWER CASE 
0481 05ED 39                        RTS  ;
0482                         * 
0483                         * 
0484 05EE 1A 02              NOTHEX ORCC #2 SET (V) FLAG IN C-CODES REGISTER 
0485 05F0 39                        RTS  ;
0486                         * 
0487                         * 
0488 05F1 34 10              OUT4H PSHS X PUSH X-REG. ON THE STACK 
0489 05F3 35 02                     PULS A POP MS BYTE OF X-REG INTO A-ACC. 
0490 05F5 8D 02                     BSR OUTHL OUTPUT HEX LEFT 
0491 05F7 35 02                     PULS A POP LS BYTE OF X-REG INTO A-ACC. 
0492 05F9                    OUTHL EQU * 
0493 05F9 34 02              OUT2H PSHS A SAVE IT BACK ON STACK 
0494 05FB 44                        LSRA CONVERT UPPER HEX NIBBLE TO ASCII 
0495 05FC 44                        LSRA  ;
0496 05FD 44                        LSRA  ;
0497 05FE 44                        LSRA  ;
0498 05FF 8D 04                     BSR XASCII PRINT HEX NIBBLE AS ASCII 
0499 0601 35 02              OUTHR PULS A CONVERT LOWER HEX NIBBLE TO ASCII 
0500 0603 84 0F                     ANDA #$0F STRIP LEFT NIBBLE 
0501 0605 8B 30              XASCII ADDA #$30 ASCII ADJ 
0502 0607 81 39                     CMPA #$39 IS IT < OR = "9" ? 
0503 0609 2F 02                     BLE  OUTC IF LESS, OUTPUT IT 
0504 060B 8B 07                     ADDA #7 IF > MAKE ASCII LETTER 
0505 060D 20 36              OUTC BRA  OUTCH OUTPUT CHAR 
0506                         * 
0507                         * BINARY / ASCII --- THIS ROUTINE 
0508                         * OUTPUTS A BYTE IN ENHANCED 
0509                         * BINARY FORMAT. THE ENHANCEMENT 
0510                         * IS DONE BY SUBSTITUTING ASCII 
0511                         * LETTERS FOR THE ONES IN THE BYTE. 
0512                         * THE ASCII ENHANCEMENT LETTERS 
0513                         * ARE OBTAINED FROM THE STRING 
0514                         * POINTED TO BY THE INDEX REG. "X". 
0515                         * 
0516 060F 34 02              BIASCI PSHS A SAVE "A" ON STACK 
0517 0611 C6 08                     LDB  #8 PRESET LOOP# TO BITS PER BYTE 
0518 0613 A6 80              OUTBA LDA ,X+ GET LETTER FROM STRING 
0519 0615 68 E4                     ASL  ,S TEST BYTE FOR "1" IN B7 
0520 0617 25 02                     BCS PRTBA IF ONE PRINT LETTER 
0521 0619 86 2D                     LDA #'- IF ZERO PRINT "-" 
0522 061B 8D 28              PRTBA BSR OUTCH PRINT IT 
0523 061D 8D 24                     BSR OUT1S PRINT SPACE 
0524 061F 5A                        DECB SUB 1 FROM #BITS YET TO PRINT 
0525 0620 26 F1                     BNE OUTBA 
0526 0622 35 82                     PULS A,PC
0527                         * 
0528                         * PRINT STRING PRECEEDED BY A CR & LF. 
0529                         * 
0530 0624 6E 9F F8 10        PSTRNG JMP [PSTRGV] PRINT CR/LF 
0531                         * 
0532                         * PCRLF 
0533                         * 
0534 0628 6E 9F F8 0E        PCRLF  JMP [PCRLFV]
0535                         * 
0536                         * PDATA 
0537                         * 
0538 062C 6E 9F F8 0C        PDATA  JMP [PDATAV]
0539                         * 
0540 0630 7D 01 08           ECHON  TST  ECHO IS ECHO REQUIRED ? 
0541 0633 27 04                     BEQ  INCH ECHO NOT REQ. IF CLEAR 
0542                         * 
0543                         * INCHE 
0544                         * 
0545                         * ---GETS CHARACTER FROM TERMINAL AND 
0546                         * ECHOS SAME. THE CHARACTER IS RETURNED 
0547                         * IN THE "A" ACCUMULATOR WITH THE PARITY 
0548                         * BIT MASKED OFF. ALL OTHER REGISTERS 
0549                         * ARE PRESERVED. 
0550                         * 
0551 0635 6E 9F F8 06        INCHE  JMP [INCHEV]
0552                         * 
0553                         * INCH 
0554                         * 
0555                         * GET CHARACTER FROM TERMINAL. RETURN 
0556                         * CHARACTER IN "A" ACCUMULATOR AND PRESERVE 
0557                         * ALL OTHER REGISTERS. THE INPUT CHARACTER 
0558                         * IS 8 BITS AND IS NOT ECHOED. 
0559                         * 
0560                         * 
0561 0639 6E 9F F8 04        INCH    JMP [INCHV]
0562                         * 
0563                         * INCHEK 
0564                         * 
0565                         * CHECK FOR A CHARACTER AVAILABLE FROM 
0566                         * THE TERMINAL. THE SERIAL PORT IS CHECKED 
0567                         * FOR READ READY. ALL REGISTERS ARE 
0568                         * PRESERVED, AND THE "Z" BIT WILL BE 
0569                         * CLEAR IF A CHARACTER CAN BE READ. 
0570                         * 
0571                         * 
0572 063D 6E 9F F8 08        INCHEK  JMP [INCHEKV]
0573                         * 
0574 0641 8D 00              OUT2S   BSR OUT1S OUTPUT 2 SPACES 
0575 0643 86 20              OUT1S   LDA  #$20  OUTPUT 1 SPACE 
0576                         * 
0577                         * 
0578                         * OUTCH 
0579                         * 
0580                         * OUTPUT CHARACTER TO TERMINAL. 
0581                         * THE CHAR. TO BE OUTPUT IS 
0582                         * PASSED IN THE A REGISTER. 
0583                         * ALL REGISTERS ARE PRESERVED. 
0584                         * 
0585 0645 6E 9F F8 0A        OUTCH   JMP [OUTCHV]
0586                         *
0587                         * MESSAGE STRINGS
0588                         *
0589 0649 0A 0D              TTLMSG FCB $0A,$0D
0590 064B 43 4F 4D 50 41 43         FCC "COMPACT FLASH SECTOR READ/WRITE UTILITY"
          54 20 46 4C 41 53
          48 20 53 45 43 54
          4F 52 20 52 45 41
          44 2F 57 52 49 54
          45 20 55 54 49 4C
          49 54 59
0591 0672 04                        FCB $04
0592 0673 0D 0A              CMDMSG FCB $0D,$0A
0593 0675 28 52 29 20 52 45         FCC "(R) READ SECTOR   "
          41 44 20 53 45 43
          54 4F 52 20 20 20
0594 0687 28 57 29 20 57 52         FCC "(W) WRITE SECTOR  "
          49 54 45 20 53 45
          43 54 4F 52 20 20
0595 0699 0D 0A                     FCB $0D,$0A
0596 069B 28 4E 29 20 4E 45         FCC "(N) NEXT SECTOR   "
          58 54 20 53 45 43
          54 4F 52 20 20 20
0597 06AD 28 50 29 20 50 52         FCC "(P) PREV SECTOR   "
          45 56 20 53 45 43
          54 4F 52 20 20 20
0598 06BF 0D 0A                     FCB $0D,$0A
0599 06C1 28 4D 29 20 4D 4F         FCC "(M) MODIFY SECTOR "
          44 49 46 59 20 53
          45 43 54 4F 52 20
0600 06D3 28 51 29 20 51 55         FCC "(Q) QUIT          "
          49 54 20 20 20 20
          20 20 20 20 20 20
0601 06E5 0D 0A                     FCB $0D,$0A
0602 06E7 3A 20                     FCC ": "
0603 06E9 04                        FCB $04
0604 06EA 53 45 43 54 4F 52  SECPMT FCC "SECTOR NUMBER (6 HEX) : "
          20 4E 55 4D 42 45
          52 20 28 36 20 48
          45 58 29 20 3A 20
0605 0702 04                        FCB $04
0606 0703 53 45 43 54 4F 52  SECMSG FCC "SECTOR NUMBER - $"
          20 4E 55 4D 42 45
          52 20 2D 20 24
0607 0714 04                        FCB $04
0608 0715 0D 0A              MEMMSG FCB $0D,$0A
0609 0717 4D 45 4D 4F 52 59         FCC "MEMORY ADDRESS (3 HEX): "
          20 41 44 44 52 45
          53 53 20 28 33 20
          48 45 58 29 3A 20
0610 072F 04                        FCB $04
0611 0730 20 2D 20           MSG5   FCC " - "
0612 0733 04                        FCB $04
0613 0734 00 00 0A 0D 00 00  MSG2   FCB $00,$00,$0A,$0D,$00,$00,$00,$04
          00 04
0614 073C 57 68 61 74 20 3F  WOTMSG FCC "What ?"
0615 0742 0D 0A 04                  FCB $0D,$0A,$04
0616 0745 0D 0A              PAGMSG FCB $0D,$0A
0617 0747 48 69 74 20 61 6E         FCC "Hit any key to continue"
          79 20 6B 65 79 20
          74 6F 20 63 6F 6E
          74 69 6E 75 65
0618 075E 04                        FCB $04
0619                         *
0620 075F 00                        FCB $00
0621                                END START
Program + Init Data = 1056 bytes
Error count = 0
